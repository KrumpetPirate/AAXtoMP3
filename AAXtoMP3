#!/usr/bin/env bash

set -o errexit -o noclobber -o nounset -o pipefail

codec=libmp3lame
extension=mp3
mode=chaptered
flac=""
aac=""
opus=""
single=""

authcode=".authcode";
auth="";
allfromfolder="";
multi_thread="";
multi_thread_count=4;


if [ -z ${HOME+x} ] && ! [ -z ${USERPROFILE+x} ]; then HOME="$USERPROFILE"; fi
authcodeDirs="${HOME}/ ./"
GREP=$(grep --version | grep -q GNU && echo "grep" || echo "ggrep")

if ! [[ $(type -P "$GREP") ]]; then
    echo "$GREP (GNU grep) is not in your PATH"
    echo "Without it, this script will break."
    echo "On macOS, you may want to try: brew install grep"
    exit 1
fi

if ! [[ $(type -P ffmpeg) ]]; then
    echo "ffmpeg is not in your PATH"
    echo "Without it, this script will break."
    exit 1
fi

function print_manual(){
    echo ""
    echo "This is the multithreaded Version of the AAXtoMP3-Tool. It can process multiple files at once."
	echo "Usage: bash AAXtoMP3 [--flac] [--aac] [--opus ] [--single] [--threads=NUMBER] --auth=AUTHCODE {FILES}"
    echo "	Note that when you enter conflicting parameters, the last one in the list at the bottom will be the one used. This means, opus wins over flac and aac, and so on."
    echo "	You HAVE to use the equals-sign. You may also use -a=AUTHCODE. But the '=' is mandatory."
    echo "	Everything after the authcode must be a filename to a file which you want to convert"
    echo ""
    echo "		[--flac]: The flac codec is used in the resulting files. Default is MP3"
    echo "		[--aac]: The aac codec is used in the resulting files. Default is MP3"
    echo "		[--opus]: The opus codec is used in the resulting files. Default is MP3"
    echo "		[--single] : Prevents creation of chapters. Results in a single file."
    echo "		[--multithreading] : Enables Multitrheading. Uses 4 cores. Please use --threads=NUMBER if you dont have 4 cores."
    echo "		[--threads=NUMBER] : Sets the number of cores used. Enables Multithreading"
    echo "		--authcode=XXXXXXXX: Your personal autcode. Everything after this parameter will be used as an inputfile!"
    echo "		[--all] : Processes all .aax files from the current working directory. Ignores (FILES)."
    echo "		{FILES}: Files to convert, seperated by spaces."
    echo ""
}


if [ "$#" -eq 0 ]; then
	print_manual
    exit 1
fi


if [[ "$1" = '-h' ]]; then
	print_manual
    exit 1
fi
if [[ "$1" = '--help' ]]; then
	print_manual
    exit 1
fi


#Iterate over the parameter to find all entered ones
for var in "$@"
do
    
	if [[ "$var" = '--flac' ]]
	then
		flac='--flac '
		shift
	fi

	if [[ "$var" == '--aac' ]]
	then
		aac='--aac'
		single='--single '
		shift
	fi

	if [[ "$var" = '--opus' ]]
	then
		opus='--opus '
		shift
	fi
	
	if [[ "$var" == '--single' ]]
	then
		single='--single '
		shift
	fi
	
	if [[ "$var" == '--all' ]]
	then
		allfromfolder='true'
		shift
	fi
	
	
	case "$var" in
		-a=*|--auth=*)
		auth=$(echo $var | cut -d '=' -f 2)
		shift
	esac
	
	case "$var" in
		-t=*|--threads=*)
		multi_thread_count=$(echo $var | cut -d '=' -f 2)
		multi_thread="1"
		shift
	esac
	
	if [[ "$var" == '--multithreading' ]]
	then
		multi_thread="1"
		shift
	fi

done


auth_code="";
for dir in $authcodeDirs; do
	codeFile="${dir}$authcode";

	if [ ! -f "$codeFile" -o ! -s "$codeFile" ]; then
		codeFile=""
		echo "INFO: Sorry, missing or empty \"$codeFile\" found, skipping.";
	fi;
done;

if [ -z "$auth_code" ]; then
	auth_code="$auth";
fi;

if [ -z "$auth_code" ]; then
	echo "INFO: Sorry, no authcode provided.";
	exit 1;
fi;

debug() {
    echo "$(date "+%F %T%z") ${1}"
}

trap 'rm -r -f "${working_directory}"' EXIT
working_directory=`mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir'`
metadata_file="${working_directory}/metadata.txt"



# find all aax-files and store them
FileArray=()
j=0;
for i in * ; do
  case $i in *.aax)
	j=$((j+1))
	FileArray+=("$i")
	echo "Found file: $i"
  esac
done


#If multithread is not set, use default processing.
if [ -z "$multi_thread" ]; then
	echo "Using a single thread!"
	
	if [ -n "$allfromfolder" ]
	then
		for file in "${FileArray[@]}"
			do
				bash AAXtoMP3Worker "${flac}" "${aac}" "${opus}" "${single}" "--auth=${auth_code}" "$file" 
			done
		exit 0
	fi
	
	
	for path
		do
			bash AAXtoMP3Worker "${flac}" "${aac}" "${opus}" "${single}" "--auth=${auth_code}" "${path}" 
		done
	exit 0;
fi;



#Count Tasks
i=0;
PidArray=()

if [ -n "$allfromfolder" ]
		then
			for file in "${FileArray[@]}"
			do
				i=$((i+1))
			done
		else
			for var in "$@"
			do
				i=$((i+1))
			done
		fi


echo "$i tasks to do"

usedThreads=0;
processes_left=1;
remainingTasks=$i;
executedTasks=0;

if ! [ -d log ]
then
	mkdir log
fi


#The max thread number needs to be set. Default is 4.
#While not all workers are used, create a new worker.
#while [ "$usedThreads" -lt "$multi_thread_count" ]
echo "Using $multi_thread_count threads!"
while [ "$remainingTasks" -gt "0" -o "$processes_left" -eq "1" ]
do
	
	
	#when a thread is available, assign task. If not, check the others.
	if [ "$usedThreads" -lt  "$multi_thread_count" -a "$remainingTasks" -gt "0" ]
	then
		#While Tread available, assign task
		
		if [ -n "$allfromfolder" ]
		then
			path="${FileArray[$executedTasks]}"
		executedTasks=$((executedTasks+1))
		else
			path="$1";
			shift
		fi
		
		echo bash AAXtoMP3Worker "$flac" "$aac" "$opus" "$single" "--auth=$auth_code" "$path" 
		nohup bash AAXtoMP3Worker "$flac" "$aac" "$opus" "$single" "--auth=$auth_code" "$path"  &>> log/"$path".log &
		
	
		#echo "new task with id: $!"
		PidArray+=("$!")
		usedThreads=$((usedThreads+1))
		remainingTasks=$((remainingTasks-1))
		
	fi

	#validate if every task is still running
		count_still_running=0;
		for i in "${PidArray[@]}"
		do
			
			if [ -z "${i}" ]
			then
				continue
			fi
						
			
			if [ -d "/proc/${i}" ]
			then
				#echo "${i} process is running"
				count_still_running=$((count_still_running+1))
			else
				#echo "${i} process has stopped"
				delete="${i}"
				PidArray=("${PidArray[@]/$delete}")
				usedThreads=$((usedThreads-1))
			fi
		done
		
		if [ "$count_still_running" -eq  "0" ]
		then
			echo "all worker have stopped."
			processes_left=0
		else
			echo "$count_still_running Jobs are still running."
		fi
	
	#pause execution for 2 seconds, and then check again
	sleep 2
done
